# PS1 function
set_prompt ()
{
  # \e = \033
  
  # Reset
  local Color_Off='\[\e[0m\]'

  # Regular Colors
  local Black='\[\e[0;30m\]'
  local Red='\[\e[0;31m\]'
  local Green='\[\e[0;32m\]'
  local Yellow='\[\e[0;33m\]'
  local Blue='\[\e[0;34m\]'
  local Purple='\[\e[0;35m\]'
  local Cyan='\[\e[0;36m\]'
  local White='\[\e[0;37m\]'

  # Bold
  local BBlack='\[\e[1;30m\]'
  local BRed='\[\e[1;31m\]'
  local BGreen='\[\e[1;32m\]'
  local BYellow='\[\e[1;33m\]'
  local BBlue='\[\e[1;34m\]'
  local BPurple='\[\e[1;35m\]'
  local BCyan='\[\e[1;36m\]'
  local BWhite='\[\e[1;37m\]'

  # Underline
  local UBlack='\[\e[4;30m\]'
  local URed='\[\e[4;31m\]'
  local UGreen='\[\e[4;32m\]'
  local UYellow='\[\e[4;33m\]'
  local UBlue='\[\e[4;34m\]'
  local UPurple='\[\e[4;35m\]'
  local UCyan='\[\e[4;36m\]'
  local UWhite='\[\e[4;37m\]'

  # Background
  local On_Black='\[\e[40m\]'
  local On_Red='\[\e[41m\]'
  local On_Green='\[\e[42m\]'
  local On_Yellow='\[\e[43m\]'
  local On_Blue='\[\e[44m\]'
  local On_Purple='\[\e[45m\]'
  local On_Cyan='\[\e[46m\]'
  local On_White='\[\e[47m\]'

  # High Intensity
  local IBlack='\[\e[0;90m\]'
  local IRed='\[\e[0;91m\]'
  local IGreen='\[\e[0;92m\]'
  local IYellow='\[\e[0;93m\]'
  local IBlue='\[\e[0;94m\]'
  local IPurple='\[\e[0;95m\]'
  local ICyan='\[\e[0;96m\]'
  local IWhite='\[\e[0;97m\]'

  # Bold High Intensity
  local BIBlack='\[\e[1;90m\]'
  local BIRed='\[\e[1;91m\]'
  local BIGreen='\[\e[1;92m\]'
  local BIYellow='\[\e[1;93m\]'
  local BIBlue='\[\e[1;94m\]'
  local BIPurple='\[\e[1;95m\]'
  local BICyan='\[\e[1;96m\]'
  local BIWhite='\[\e[1;97m\]'

  # High Intensity backgrounds
  local On_IBlack='\[\e[0;100m\]'
  local On_IRed='\[\e[0;101m\]'
  local On_IGreen='\[\e[0;102m\]'
  local On_IYellow='\[\e[0;103m\]'
  local On_IBlue='\[\e[0;104m\]'
  local On_IPurple='\[\e[0;105m\]'
  local On_ICyan='\[\e[0;106m\]'
  local On_IWhite='\[\e[0;107m\]'

  export GIT_PS1_SHOWDIRTYSTATE=1
  export GIT_PS1_SHOWSTASHSTATE=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1
  export GIT_PS1_SHOWUPSTREAM="auto"

  # PS1="$BGreen\u$BYellow:$BCyan\w$BRed\$(__git_ps1)$BYELLOW\$\n$BBlack> $Color_Off"
  PS1="$BCyan\u$BRed@$BPurple\h$BYellow:$BBlue\w$BRed\$(__git_ps1)$BYellow\$\n$BGreen>>>$Color_Off "
}

# Automatically add completion for all aliases to commands having completion functions
alias_completion ()
{
  local namespace="alias_completion"

  # parse function based completion definitions, where capture group 2 => function and 3 => trigger
  local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
  # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
  local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

  # create array of function completion triggers, keeping multi-word triggers together
  eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
  (( ${#completions[@]} == 0 )) && return 0

  # create temporary file for wrapper functions and completions
  rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
  local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

  # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
  local line; while read line; do
    eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
    local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

    # skip aliases to pipes, boolan control structures and other command lists
    # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
    eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue

    # skip alias if there is no completion function triggered by the aliased command
    [[ " ${completions[*]} " =~ " $alias_cmd " ]] || continue
    local new_completion="$(complete -p "$alias_cmd")"

    # create a wrapper inserting the alias arguments if any
    if [[ -n $alias_args ]]; then
      local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
      # avoid recursive call loops by ignoring our own functions
      if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
        local compl_wrapper="_${namespace}::${alias_name}"
        echo "function $compl_wrapper {
            (( COMP_CWORD += ${#alias_arg_words[@]} ))
            COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
            (( COMP_POINT -= \${#COMP_LINE} ))
            COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
            (( COMP_POINT += \${#COMP_LINE} ))
            $compl_func
        }" >> "$tmp_file"
        new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
      fi
    fi

    # replace completion trigger by alias
    new_completion="${new_completion% *} $alias_name"
    echo "$new_completion" >> "$tmp_file"
  done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
  
  source "$tmp_file" && rm -f "$tmp_file"
}

# args: install | upgrade | remove | rollback
apt-history ()
{
  case "$1" in
    install)
      grep 'install ' /var/log/dpkg.log
      ;;
    upgrade|remove)
      grep $1 /var/log/dpkg.log
      ;;
    rollback)
      grep upgrade /var/log/dpkg.log | \
          grep "$2" -A10000000 | \
          grep "$3" -B10000000 | \
          awk '{print $4"="$5}'
      ;;
    *)
      cat /var/log/dpkg.log
      ;;
  esac
}
